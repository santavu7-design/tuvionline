/**
 * TuVi Processor - Logic trung gian x·ª≠ l√Ω th√¥ng tin t·ª≠ vi
 * Ch·ªâ l√†m 2 vi·ªác: L∆∞u database + G·ª≠i model t·∫°o file MD
 */

class TuViProcessor {
    constructor() {
        if (!window.modelManager) {
            throw new Error('ModelManager ch∆∞a ƒë∆∞·ª£c load. Ki·ªÉm tra th·ª© t·ª± load script files.');
        }
        this.modelManager = window.modelManager;
        // Lazy instantiate ƒë·ªÉ tr√°nh race condition
        this._tuviService = null;
        this._database = null;
    }
    
    // Getter cho tuviService - lazy instantiate
    get tuviService() {
        if (!this._tuviService) {
            if (!window.TuViGeminiService) {
                throw new Error('TuViGeminiService ch∆∞a ƒë∆∞·ª£c load. Ki·ªÉm tra th·ª© t·ª± load script files.');
            }
            this._tuviService = new TuViGeminiService();
        }
        return this._tuviService;
    }
    
    // Getter cho database - lazy instantiate
    get database() {
        if (!this._database) {
            this._database = new TuViDatabase();
        }
        return this._database;
    }

    /**
     * X·ª≠ l√Ω th√¥ng tin sinh nh·∫≠t - Logic ch√≠nh
     * @param {Object} birthInfo - Th√¥ng tin sinh nh·∫≠t t·ª´ form
     * @returns {Promise<Object>} K·∫øt qu·∫£ x·ª≠ l√Ω
     */
    async processBirthInfo(birthInfo) {
        console.log('üîÑ TuVi Processor b·∫Øt ƒë·∫ßu x·ª≠ l√Ω...');
        
        try {
            // Step 1: L∆∞u v√†o database
            console.log('üìä Step 1: L∆∞u th√¥ng tin v√†o database...');
            const savedRecord = await this.database.saveBirthInfo(birthInfo);
            console.log(`‚úÖ ƒê√£ l∆∞u record ID: ${savedRecord.id}`);

            // Step 2: G·ª≠i t·ªõi model v√† t·∫°o file MD
            console.log('ü§ñ Step 2: G·ª≠i t·ªõi Gemini model...');
            const modelResult = await this.tuviService.callGeminiAPI(birthInfo);
            
            if (!modelResult.success) {
                throw new Error(`Model call failed: ${modelResult.error}`);
            }

            console.log(`‚úÖ Model th√†nh c√¥ng: ${modelResult.usedModel || 'default'}`);

            // Step 3: T·∫°o file MD
            console.log('üìÑ Step 3: T·∫°o file markdown...');
            const filename = await this.createMarkdownFile(modelResult.markdown, birthInfo);
            console.log(`‚úÖ ƒê√£ t·∫°o file: ${filename}`);

            // Step 4: C·∫≠p nh·∫≠t database v·ªõi file path
            await this.database.updateRecordWithFile(savedRecord.id, filename);
            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t database v·ªõi file path`);

            return {
                success: true,
                recordId: savedRecord.id,
                filename: filename,
                usedModel: modelResult.usedModel,
                usedKey: modelResult.usedKey,
                markdownLength: modelResult.markdown.length
            };

        } catch (error) {
            console.error('‚ùå TuVi Processor l·ªói:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * T·∫°o file markdown t·ª´ k·∫øt qu·∫£ model
     * @param {string} markdownContent - N·ªôi dung markdown t·ª´ model
     * @param {Object} birthInfo - Th√¥ng tin sinh ƒë·ªÉ ƒë·∫∑t t√™n file
     * @returns {Promise<string>} T√™n file ƒë√£ t·∫°o
     */
    async createMarkdownFile(markdownContent, birthInfo) {
        // T·∫°o t√™n file t·ª´ th√¥ng tin sinh
        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
        const nameSlug = this.createSlug(birthInfo.fullName);
        const filename = `tuvi_${nameSlug}_${timestamp}.md`;

        try {
            // T·∫°o header cho file MD
            const header = this.createMarkdownHeader(birthInfo);
            const fullContent = header + '\n\n' + markdownContent;

            // L∆∞u file (simulate - browser kh√¥ng th·ªÉ ghi file tr·ª±c ti·∫øp)
            this.downloadMarkdownFile(fullContent, filename);
            
            return filename;
        } catch (error) {
            console.error('L·ªói t·∫°o file markdown:', error);
            throw error;
        }
    }

    /**
     * T·∫°o header cho file markdown
     * @param {Object} birthInfo - Th√¥ng tin sinh
     * @returns {string} Header markdown
     */
    createMarkdownHeader(birthInfo) {
        const createdTime = new Date().toLocaleString('vi-VN');
        
        return `# L√° S·ªë T·ª≠ Vi - ${birthInfo.fullName}

---

**Th√¥ng tin c∆° b·∫£n:**
- H·ªç v√† t√™n: ${birthInfo.fullName}
- Gi·ªõi t√≠nh: ${birthInfo.gender}
- Ng√†y sinh: ${birthInfo.birthDate} ${birthInfo.birthTime}
- N∆°i sinh: ${birthInfo.birthplace}
- Th·ªùi gian t·∫°o: ${createdTime}

---

## L√° S·ªë T·ª≠ Vi Chi Ti·∫øt`;
    }

    /**
     * T·∫°o slug t·ª´ t√™n ng∆∞·ªùi d√πng
     * @param {string} name - T√™n ng∆∞·ªùi d√πng
     * @returns {string} Slug
     */
    createSlug(name) {
        return name
            .toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '') // Remove diacritics
            .replace(/[^a-z0-9]/g, '_')
            .replace(/_+/g, '_')
            .replace(/^_|_$/g, '');
    }

    /**
     * Download file markdown (browser compatibility)
     * @param {string} content - N·ªôi dung file
     * @param {string} filename - T√™n file
     */
    downloadMarkdownFile(content, filename) {
        const blob = new Blob([content], { type: 'text/markdown;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        a.style.display = 'none';
        
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        URL.revokeObjectURL(url);
        
        console.log(`üìÅ File ${filename} ƒë√£ ƒë∆∞·ª£c t·∫°o v√† download`);
    }
}

/**
 * TuVi Database - Qu·∫£n l√Ω l∆∞u tr·ªØ th√¥ng tin
 */
class TuViDatabase {
    constructor() {
        this.storageKey = 'tuvi_database';
        this.initialize();
    }

    /**
     * Kh·ªüi t·∫°o database
     */
    initialize() {
        if (!localStorage.getItem(this.storageKey)) {
            const initialDB = {
                records: [],
                nextId: 1,
                created: new Date().toISOString()
            };
            localStorage.setItem(this.storageKey, JSON.stringify(initialDB));
            console.log('üìä Database initialized');
        }
    }

    /**
     * L∆∞u th√¥ng tin sinh nh·∫≠t
     * @param {Object} birthInfo - Th√¥ng tin sinh nh·∫≠t
     * @returns {Promise<Object>} Record ƒë√£ l∆∞u
     */
    async saveBirthInfo(birthInfo) {
        const db = this.getDatabase();
        
        const record = {
            id: db.nextId++,
            ...birthInfo,
            created: new Date().toISOString(),
            status: 'processing',
            filename: null,
            modelUsed: null
        };

        db.records.push(record);
        this.saveDatabase(db);
        
        console.log(`üíæ Saved record ID ${record.id} to database`);
        return record;
    }

    /**
     * C·∫≠p nh·∫≠t record v·ªõi th√¥ng tin file
     * @param {number} recordId - ID c·ªßa record
     * @param {string} filename - T√™n file ƒë√£ t·∫°o
     * @param {string} modelUsed - Model ƒë√£ s·ª≠ d·ª•ng
     */
    async updateRecordWithFile(recordId, filename, modelUsed = null) {
        const db = this.getDatabase();
        const record = db.records.find(r => r.id === recordId);
        
        if (record) {
            record.filename = filename;
            record.modelUsed = modelUsed;
            record.status = 'completed';
            record.completed = new Date().toISOString();
            
            this.saveDatabase(db);
            console.log(`üíæ Updated record ID ${recordId} with file info`);
        }
    }

    /**
     * L·∫•y t·∫•t c·∫£ records
     * @returns {Array} Danh s√°ch records
     */
    getAllRecords() {
        const db = this.getDatabase();
        return db.records;
    }

    /**
     * L·∫•y record theo ID
     * @param {number} recordId - ID c·ªßa record
     * @returns {Object|null} Record ho·∫∑c null
     */
    getRecord(recordId) {
        const db = this.getDatabase();
        return db.records.find(r => r.id === recordId) || null;
    }

    /**
     * X√≥a record
     * @param {number} recordId - ID c·ªßa record
     * @returns {boolean} Th√†nh c√¥ng hay kh√¥ng
     */
    deleteRecord(recordId) {
        const db = this.getDatabase();
        const index = db.records.findIndex(r => r.id === recordId);
        
        if (index !== -1) {
            db.records.splice(index, 1);
            this.saveDatabase(db);
            console.log(`üóëÔ∏è Deleted record ID ${recordId}`);
            return true;
        }
        
        return false;
    }

    /**
     * L·∫•y database t·ª´ localStorage
     * @returns {Object} Database object
     */
    getDatabase() {
        const dbString = localStorage.getItem(this.storageKey);
        return dbString ? JSON.parse(dbString) : { records: [], nextId: 1 };
    }

    /**
     * L∆∞u database v√†o localStorage
     * @param {Object} db - Database object
     */
    saveDatabase(db) {
        localStorage.setItem(this.storageKey, JSON.stringify(db));
    }

    /**
     * Xu·∫•t database
     * @returns {Object} Database object
     */
    exportDatabase() {
        return this.getDatabase();
    }

    /**
     * X√≥a to√†n b·ªô database
     */
    clearDatabase() {
        localStorage.removeItem(this.storageKey);
        this.initialize();
        console.log('üóëÔ∏è Database cleared');
    }

    /**
     * L·∫•y th·ªëng k√™ database
     * @returns {Object} Th·ªëng k√™
     */
    getStats() {
        const db = this.getDatabase();
        const total = db.records.length;
        const completed = db.records.filter(r => r.status === 'completed').length;
        const processing = db.records.filter(r => r.status === 'processing').length;
        
        return {
            total,
            completed,
            processing,
            successRate: total > 0 ? Math.round((completed / total) * 100) : 0
        };
    }
}

// Export cho browser
if (typeof window !== 'undefined') {
    window.TuViProcessor = TuViProcessor;
    window.TuViDatabase = TuViDatabase;
}

// Export cho Node.js n·∫øu c·∫ßn
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { TuViProcessor, TuViDatabase };
}
