import { TuViChart } from './TuViService';
import moment from 'moment';

export interface DailyFortune {
  date: string;
  overallLuck: 'R·∫•t T·ªët' | 'T·ªët' | 'B√¨nh Th∆∞·ªùng' | 'X·∫•u' | 'R·∫•t X·∫•u';
  summary: string;
  details: {
    love: string;
    career: string;
    health: string;
    wealth: string;
    travel: string;
  };
  recommendations: {
    shouldDo: string[];
    shouldNotDo: string[];
  };
  luckyElements: {
    color: string;
    number: string;
    direction: string;
    time: string;
  };
}

export class FortuneService {
  static async generateDailyFortune(tuViChart: TuViChart, targetDate: string = new Date().toISOString().split('T')[0]): Promise<DailyFortune> {
    // T√≠nh to√°n can chi c·ªßa ng√†y h√¥m nay
    const todayDate = new Date(targetDate);
    const todayCanChi = this.calculateDailyCanChi(todayDate);
    
    // T·∫°o prompt cho LLM
    const prompt = this.createFortunePrompt(tuViChart, todayCanChi, targetDate);
    
    // G·ªçi LLM ƒë·ªÉ ph√¢n t√≠ch (trong th·ª±c t·∫ø s·∫Ω g·ªçi API)
    const fortuneData = await this.callLLMForFortune(prompt);
    
    return fortuneData;
  }

  private static calculateDailyCanChi(date: Date): { can: string; chi: string } {
    // Logic t√≠nh can chi c·ªßa ng√†y
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    
    // Simplified calculation - in real implementation, this would be more complex
    const canIndex = (year + month + day) % 10;
    const chiIndex = (year + month + day) % 12;
    
    const CAN = ['Gi√°p', '·∫§t', 'B√≠nh', 'ƒêinh', 'M·∫≠u', 'K·ª∑', 'Canh', 'T√¢n', 'Nh√¢m', 'Qu√Ω'];
    const CHI = ['T√Ω', 'S·ª≠u', 'D·∫ßn', 'M√£o', 'Th√¨n', 'T·ªµ', 'Ng·ªç', 'M√πi', 'Th√¢n', 'D·∫≠u', 'Tu·∫•t', 'H·ª£i'];
    
    return {
      can: CAN[canIndex],
      chi: CHI[chiIndex]
    };
  }

  private static createFortunePrompt(tuViChart: TuViChart, todayCanChi: { can: string; chi: string }, date: string): string {
    return `
    D·ª±a tr√™n l√° s·ªë t·ª≠ vi c·ªßa ${tuViChart.name} v√† th√¥ng tin ng√†y ${date} (${todayCanChi.can} ${todayCanChi.chi}), 
    h√£y ph√¢n t√≠ch v·∫≠n m·ªánh ng√†y h√¥m nay v√† ƒë∆∞a ra d·ª± ƒëo√°n chi ti·∫øt.

    Th√¥ng tin l√° s·ªë:
    - M·ªánh: ${tuViChart.birthInfo.menh}
    - C·ª•c: ${tuViChart.birthInfo.cuc}
    - M·ªánh ch·ªß: ${tuViChart.birthInfo.menhChu}
    - Th√¢n ch·ªß: ${tuViChart.birthInfo.thanChu}

    C√°c cung trong l√° s·ªë:
    ${tuViChart.houses.map(house => 
      `- ${house.name} (${house.zodiac}): ${house.stars.map(star => `${star.name}(${star.status})`).join(', ')}`
    ).join('\n')}

    Ng√†y h√¥m nay: ${date} (${todayCanChi.can} ${todayCanChi.chi})

    H√£y ph√¢n t√≠ch v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ theo format JSON sau:
    {
      "overallLuck": "R·∫•t T·ªët|T·ªët|B√¨nh Th∆∞·ªùng|X·∫•u|R·∫•t X·∫•u",
      "summary": "T√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ v·∫≠n m·ªánh ng√†y h√¥m nay",
      "details": {
        "love": "Ph√¢n t√≠ch v·ªÅ t√¨nh duy√™n",
        "career": "Ph√¢n t√≠ch v·ªÅ c√¥ng vi·ªác",
        "health": "Ph√¢n t√≠ch v·ªÅ s·ª©c kh·ªèe",
        "wealth": "Ph√¢n t√≠ch v·ªÅ t√†i l·ªôc",
        "travel": "Ph√¢n t√≠ch v·ªÅ ƒëi l·∫°i"
      },
      "recommendations": {
        "shouldDo": ["Vi·ªác n√™n l√†m 1", "Vi·ªác n√™n l√†m 2"],
        "shouldNotDo": ["Vi·ªác kh√¥ng n√™n l√†m 1", "Vi·ªác kh√¥ng n√™n l√†m 2"]
      },
      "luckyElements": {
        "color": "M√†u may m·∫Øn",
        "number": "S·ªë may m·∫Øn",
        "direction": "H∆∞·ªõng may m·∫Øn",
        "time": "Gi·ªù may m·∫Øn"
      }
    }
    `;
  }

  private static async callLLMForFortune(prompt: string): Promise<DailyFortune> {
    // Trong th·ª±c t·∫ø, ƒë√¢y s·∫Ω l√† API call ƒë·∫øn LLM service
    // Hi·ªán t·∫°i s·∫Ω tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Mock response - trong th·ª±c t·∫ø s·∫Ω parse t·ª´ LLM response
    const mockResponse = {
      overallLuck: 'T·ªët' as const,
      summary: 'H√¥m nay l√† m·ªôt ng√†y kh√° thu·∫≠n l·ª£i cho b·∫°n. C√°c sao t·ªët ƒëang chi·∫øu m·ªánh, ƒë·∫∑c bi·ªát l√† trong lƒ©nh v·ª±c c√¥ng vi·ªác v√† t√†i ch√≠nh.',
      details: {
        love: 'T√¨nh duy√™n c√≥ d·∫•u hi·ªáu t√≠ch c·ª±c. N·∫øu ƒëang ƒë·ªôc th√¢n, c√≥ th·ªÉ g·∫∑p ng∆∞·ªùi th√∫ v·ªã. N·∫øu ƒë√£ c√≥ ng∆∞·ªùi y√™u, m·ªëi quan h·ªá s·∫Ω th√™m g·∫Øn k·∫øt.',
        career: 'C√¥ng vi·ªác thu·∫≠n l·ª£i, c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c tin t·ªët ho·∫∑c c∆° h·ªôi m·ªõi. N√™n ch·ªß ƒë·ªông trong c√°c cu·ªôc h·ªçp v√† ƒë√†m ph√°n.',
        health: 'S·ª©c kh·ªèe ·ªïn ƒë·ªãnh, nh∆∞ng n√™n ch√∫ √Ω ƒë·∫øn ch·∫ø ƒë·ªô ƒÉn u·ªëng v√† ngh·ªâ ng∆°i h·ª£p l√Ω.',
        wealth: 'T√†i l·ªôc kh√° t·ªët, c√≥ th·ªÉ c√≥ kho·∫£n thu nh·∫≠p b·∫•t ng·ªù ho·∫∑c c∆° h·ªôi ƒë·∫ßu t∆∞ t·ªët.',
        travel: 'ƒêi l·∫°i thu·∫≠n l·ª£i, c√≥ th·ªÉ ƒëi xa m√† kh√¥ng g·∫∑p tr·ªü ng·∫°i l·ªõn.'
      },
      recommendations: {
        shouldDo: [
          'T·∫≠p trung v√†o c√¥ng vi·ªác quan tr·ªçng',
          'G·∫∑p g·ª° b·∫°n b√® v√† ƒë·ªëi t√°c',
          'ƒê·∫ßu t∆∞ ho·∫∑c ti·∫øt ki·ªám ti·ªÅn',
          'T·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng'
        ],
        shouldNotDo: [
          'ƒê∆∞a ra quy·∫øt ƒë·ªãnh v·ªôi v√†ng',
          'Tranh c√£i v·ªõi ng∆∞·ªùi kh√°c',
          'Ti√™u ti·ªÅn hoang ph√≠',
          'L√†m vi·ªác qu√° s·ª©c'
        ]
      },
      luckyElements: {
        color: 'Xanh l√° c√¢y, V√†ng',
        number: '3, 7, 9',
        direction: 'ƒê√¥ng Nam, Nam',
        time: '9h-11h, 15h-17h'
      }
    };

    return {
      date: new Date().toISOString().split('T')[0],
      ...mockResponse
    };
  }

  static getLuckyColor(overallLuck: string): string {
    const colorMap = {
      'R·∫•t T·ªët': '#4CAF50',
      'T·ªët': '#8BC34A',
      'B√¨nh Th∆∞·ªùng': '#FFC107',
      'X·∫•u': '#FF9800',
      'R·∫•t X·∫•u': '#F44336'
    };
    return colorMap[overallLuck] || '#FFC107';
  }

  static getLuckIcon(overallLuck: string): string {
    const iconMap = {
      'R·∫•t T·ªët': 'üåü',
      'T·ªët': '‚≠ê',
      'B√¨nh Th∆∞·ªùng': '‚ö™',
      'X·∫•u': '‚ö†Ô∏è',
      'R·∫•t X·∫•u': 'üí•'
    };
    return iconMap[overallLuck] || '‚ö™';
  }
}
