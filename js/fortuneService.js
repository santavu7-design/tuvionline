// FortuneService - Service xem t·ª≠ vi ng√†y
class FortuneService {
    constructor() {
        this.llmService = window.llmService;
    }

    // Xem t·ª≠ vi ng√†y ƒë∆∞·ª£c ch·ªçn
    async checkDailyFortune() {
        if (!userDataService.getCurrentData()) {
            alert('‚ùå Vui l√≤ng t·∫°o l√° s·ªë t·ª≠ vi tr∆∞·ªõc!');
            return;
        }

        const fortuneDateDisplay = document.getElementById('fortune_date_display');
        let selectedDate = userDataService.parseDateFromDDMMYYYY(fortuneDateDisplay.value);

        if (!selectedDate) {
            alert('Ng√†y xem kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng dd/mm/yyyy.');
            return;
        }

        // Hi·ªÉn th·ªã loading
        uiService.showLoading();

        try {
            // G·ªçi LLM ƒë·ªÉ xem t·ª≠ vi ng√†y
            const fortuneResult = await this.getDailyFortuneFromLLM(selectedDate);
            
            // Hi·ªÉn th·ªã k·∫øt qu·∫£
            this.displayFortuneResult(selectedDate, fortuneResult);
            
        } catch (error) {
            console.error('L·ªói khi xem t·ª≠ vi ng√†y:', error);
            // Fallback v·ªÅ k·∫øt qu·∫£ m·∫´u
            this.displaySampleFortuneResult(selectedDate);
        } finally {
            uiService.hideLoading();
        }
    }

    // Xem t·ª≠ vi ng√†y h√¥m nay
    checkDailyFortuneToday() {
        const today = new Date();
        document.getElementById('fortune_date_display').value = userDataService.formatDateToDDMMYYYY(today);
        this.checkDailyFortune();
    }

    // G·ªçi LLM ƒë·ªÉ xem t·ª≠ vi ng√†y
    async getDailyFortuneFromLLM(date) {
        if (!this.llmService) {
            throw new Error('LLM Service ch∆∞a s·∫µn s√†ng');
        }

        const dateStr = userDataService.formatDateToDDMMYYYY(date);
        const canChi = userDataService.calculateCanChi(date);
        const lunar = userDataService.calculateLunarDate(date);
        
        const prompt = `B·∫°n l√† chuy√™n gia t·ª≠ vi h·ªçc Vi·ªát Nam. H√£y xem t·ª≠ vi cho ng√†y ${dateStr} (${lunar.displayText}, Can Chi: ${canChi.fullCanChi}).

H√£y ph√¢n t√≠ch:
1. T·ªïng quan ng√†y n√†y t·ªët hay x·∫•u (ƒëi·ªÉm t·ª´ 1-10)
2. Vi·ªác n√™n l√†m trong ng√†y
3. Vi·ªác n√™n tr√°nh trong ng√†y
4. L·ªùi khuy√™n c·ª• th·ªÉ

Tr·∫£ v·ªÅ theo ƒë·ªãnh d·∫°ng JSON:
{
    "tongQuan": "M√¥ t·∫£ t·ªïng quan",
    "diem": 7,
    "nenLam": ["Vi·ªác 1", "Vi·ªác 2"],
    "nenTranh": ["Vi·ªác 1", "Vi·ªác 2"],
    "loiKhuyen": "L·ªùi khuy√™n c·ª• th·ªÉ"
}`;

        try {
            const result = await this.llmService.generateContent(prompt);
            return JSON.parse(result);
        } catch (error) {
            console.error('L·ªói LLM:', error);
            throw error;
        }
    }

    // Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª≠ vi t·ª´ LLM
    displayFortuneResult(date, fortuneData) {
        const dateInfo = userDataService.calculateLunarDateInfo(date);
        
        document.getElementById('fortuneResult').style.display = 'block';
        document.getElementById('fortuneContent').innerHTML = `
            <h3>üîÆ K·∫øt Qu·∫£ Xem Ng√†y ${dateInfo.dateStr}</h3>
            <p><strong>Ng√†y xem:</strong> ${dateInfo.dateStr}</p>
            <p><strong>√Çm l·ªãch:</strong> ${dateInfo.lunarDate}</p>
            <p><strong>Can Chi:</strong> ${dateInfo.canChi}</p>
            <p><strong>T·ªïng quan:</strong> ${fortuneData.tongQuan}</p>
            <p><strong>M·ª©c ƒë·ªô:</strong> ${fortuneData.diem}/10</p>
            <p><strong>Vi·ªác n√™n l√†m:</strong> ${fortuneData.nenLam.join(', ')}</p>
            <p><strong>Vi·ªác n√™n tr√°nh:</strong> ${fortuneData.nenTranh.join(', ')}</p>
            <p><strong>L·ªùi khuy√™n:</strong> ${fortuneData.loiKhuyen}</p>
        `;
    }

    // Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª≠ vi m·∫´u (fallback)
    displaySampleFortuneResult(date) {
        const dateInfo = userDataService.calculateLunarDateInfo(date);
        
        document.getElementById('fortuneResult').style.display = 'block';
        document.getElementById('fortuneContent').innerHTML = `
            <h3>üîÆ K·∫øt Qu·∫£ Xem Ng√†y ${dateInfo.dateStr}</h3>
            <p><strong>Ng√†y xem:</strong> ${dateInfo.dateStr}</p>
            <p><strong>√Çm l·ªãch:</strong> ${dateInfo.lunarDate}</p>
            <p><strong>Can Chi:</strong> ${dateInfo.canChi}</p>
            <p><strong>T·ªïng quan:</strong> Ng√†y n√†y kh√° t·ªët cho vi·ªác h·ªçc t·∫≠p v√† giao ti·∫øp.</p>
            <p><strong>M·ª©c ƒë·ªô:</strong> 7/10</p>
            <p><strong>Vi·ªác n√™n l√†m:</strong> H·ªçc t·∫≠p, giao ti·∫øp, k√Ω k·∫øt h·ª£p ƒë·ªìng</p>
            <p><strong>Vi·ªác n√™n tr√°nh:</strong> ƒêi xa, ƒë·∫ßu t∆∞ l·ªõn</p>
            <p><strong>L·ªùi khuy√™n:</strong> N√™n t·∫≠p trung v√†o vi·ªác h·ªçc t·∫≠p v√† giao ti·∫øp trong ng√†y h√¥m nay.</p>
        `;
    }

    // T√≠nh to√°n th√¥ng tin ng√†y (helper method)
    calculateLunarDateInfo(date) {
        const canChi = userDataService.calculateCanChi(date);
        const lunar = userDataService.calculateLunarDate(date);
        
        return {
            dateStr: userDataService.formatDateToDDMMYYYY(date),
            lunarDate: lunar.displayText,
            canChi: `Can Chi: ${canChi.fullCanChi}`
        };
    }
}

// T·∫°o instance global
const fortuneService = new FortuneService();
