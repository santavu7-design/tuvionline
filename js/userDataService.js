// UserDataService - Service x·ª≠ l√Ω d·ªØ li·ªáu ng∆∞·ªùi d√πng
class UserDataService {
    constructor() {
        this.storageKeys = {
            userData: 'laso_user_data',
            chartData: 'laso_chart_data',
            markdownData: 'laso_markdown_data'
        };
    }

    // L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng
    saveUserData(userData) {
        try {
            localStorage.setItem(this.storageKeys.userData, JSON.stringify(userData));
            console.log('üíæ ƒê√£ l∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng:', userData);
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng:', error);
            return false;
        }
    }

    // L∆∞u d·ªØ li·ªáu l√° s·ªë
    saveChartData(chartData) {
        try {
            localStorage.setItem(this.storageKeys.chartData, JSON.stringify(chartData));
            console.log('üíæ ƒê√£ l∆∞u d·ªØ li·ªáu l√° s·ªë:', chartData);
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu l√° s·ªë:', error);
            return false;
        }
    }

    // L∆∞u d·ªØ li·ªáu markdown
    saveMarkdownData(markdownData) {
        try {
            localStorage.setItem(this.storageKeys.markdownData, markdownData);
            console.log('üíæ ƒê√£ l∆∞u d·ªØ li·ªáu markdown');
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu markdown:', error);
            return false;
        }
    }

    // L∆∞u t·∫•t c·∫£ d·ªØ li·ªáu
    saveAllData(userData, chartData, markdownData) {
        const userSaved = this.saveUserData(userData);
        const chartSaved = this.saveChartData(chartData);
        const markdownSaved = this.saveMarkdownData(markdownData);
        
        return userSaved && chartSaved && markdownSaved;
    }

    // T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng
    loadUserData() {
        try {
            const data = localStorage.getItem(this.storageKeys.userData);
            if (data) {
                const userData = JSON.parse(data);
                console.log('üìÇ ƒê√£ t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng:', userData);
                return userData;
            }
            return null;
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng:', error);
            return null;
        }
    }

    // T·∫£i d·ªØ li·ªáu l√° s·ªë
    loadChartData() {
        try {
            const data = localStorage.getItem(this.storageKeys.chartData);
            if (data) {
                const chartData = JSON.parse(data);
                console.log('üìÇ ƒê√£ t·∫£i d·ªØ li·ªáu l√° s·ªë:', chartData);
                return chartData;
            }
            return null;
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu l√° s·ªë:', error);
            return null;
        }
    }

    // T·∫£i d·ªØ li·ªáu markdown
    loadMarkdownData() {
        try {
            const data = localStorage.getItem(this.storageKeys.markdownData);
            if (data) {
                console.log('üìÇ ƒê√£ t·∫£i d·ªØ li·ªáu markdown');
                return data;
            }
            return null;
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu markdown:', error);
            return null;
        }
    }

    // T·∫£i t·∫•t c·∫£ d·ªØ li·ªáu
    loadAllData() {
        const userData = this.loadUserData();
        const chartData = this.loadChartData();
        const markdownData = this.loadMarkdownData();
        
        return {
            userData,
            chartData,
            markdownData,
            hasData: !!(userData && chartData && markdownData)
        };
    }

    // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu ƒë√£ l∆∞u kh√¥ng
    hasSavedData() {
        return this.loadAllData().hasData;
    }

    // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu
    clearAllData() {
        try {
            localStorage.removeItem(this.storageKeys.userData);
            localStorage.removeItem(this.storageKeys.chartData);
            localStorage.removeItem(this.storageKeys.markdownData);
            console.log('üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu');
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói khi x√≥a d·ªØ li·ªáu:', error);
            return false;
        }
    }

    // X√≥a d·ªØ li·ªáu c·ª• th·ªÉ
    clearData(type) {
        try {
            if (this.storageKeys[type]) {
                localStorage.removeItem(this.storageKeys[type]);
                console.log(`üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu ${type}`);
                return true;
            }
            return false;
        } catch (error) {
            console.error(`‚ùå L·ªói khi x√≥a d·ªØ li·ªáu ${type}:`, error);
            return false;
        }
    }

    // L·∫•y th√¥ng tin v·ªÅ d·ªØ li·ªáu ƒë√£ l∆∞u
    getStorageInfo() {
        const info = {};
        for (const [key, storageKey] of Object.entries(this.storageKeys)) {
            try {
                const data = localStorage.getItem(storageKey);
                info[key] = {
                    exists: !!data,
                    size: data ? new Blob([data]).size : 0,
                    lastModified: data ? new Date().toISOString() : null
                };
            } catch (error) {
                info[key] = {
                    exists: false,
                    size: 0,
                    lastModified: null,
                    error: error.message
                };
            }
        }
        return info;
    }

    // Xu·∫•t d·ªØ li·ªáu ra file
    exportData(filename = null) {
        try {
            const allData = this.loadAllData();
            if (!allData.hasData) {
                throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t');
            }

            const exportData = {
                exportDate: new Date().toISOString(),
                version: '1.0',
                ...allData
            };

            const blob = new Blob([JSON.stringify(exportData, null, 2)], {
                type: 'application/json'
            });

            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename || `laso_tuvi_export_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            console.log('üì§ ƒê√£ xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng');
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói khi xu·∫•t d·ªØ li·ªáu:', error);
            return false;
        }
    }

    // Nh·∫≠p d·ªØ li·ªáu t·ª´ file
    importData(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = (e) => {
                try {
                    const data = JSON.parse(e.target.result);
                    
                    // Validate d·ªØ li·ªáu
                    if (!data.userData || !data.chartData || !data.markdownData) {
                        throw new Error('D·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
                    }

                    // L∆∞u d·ªØ li·ªáu
                    const saved = this.saveAllData(data.userData, data.chartData, data.markdownData);
                    
                    if (saved) {
                        console.log('üì• ƒê√£ nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng');
                        resolve(data);
                    } else {
                        reject(new Error('Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu ƒë√£ nh·∫≠p'));
                    }
                } catch (error) {
                    reject(new Error(`L·ªói khi x·ª≠ l√Ω file: ${error.message}`));
                }
            };

            reader.onerror = () => {
                reject(new Error('Kh√¥ng th·ªÉ ƒë·ªçc file'));
            };

            reader.readAsText(file);
        });
    }

    // T·∫°o d·ªØ li·ªáu m·∫´u
    createSampleData() {
        const sampleUserData = {
            name: 'Nguy·ªÖn VƒÉn A',
            gender: 'Nam',
            birthdate: '15/06/90',
            birthtime: 'T√Ω (23:00-01:00)',
            birthplace: 'H√† N·ªôi'
        };

        const sampleChartData = {
            ho_ten: 'Nguy·ªÖn VƒÉn A',
            gioi_tinh: 'Nam',
            duong_lich: '15/06/1990 T√Ω (23:00-01:00)',
            am_lich: '23/05/Canh Ng·ªç',
            noi_sinh: 'H√† N·ªôi',
            ban_menh: 'Th·ªï',
            cuc: 'Th·ªßy Nh·ªã C·ª•c',
            am_duong: 'D∆∞∆°ng',
            chu_menh: 'Canh',
            chu_than: 'Ng·ªç',
            cung: {
                'M·ªÜNH': {
                    dia_chi: 'T√Ω',
                    chinh_tinh: 'T·ª≠ Vi (ƒê)',
                    phu_tinh_tot: 'Thi√™n Ph√∫c, Thi√™n Quan',
                    phu_tinh_xau: 'Thi√™n H√¨nh',
                    phu_tinh_trung_binh: 'Thi√™n Kh√¥ng, ƒê·ªãa Ki·∫øp',
                    vong_trang_sinh: 'Tr∆∞·ªùng Sinh',
                    is_than: 'true'
                }
            },
            chu_giai: [
                {
                    title: 'T·ª≠ Vi',
                    content: 'T·ª≠ Vi l√† ch·ªß tinh c·ªßa m·ªánh, ƒë·∫°i di·ªán cho quy·ªÅn l·ª±c, danh v·ªçng v√† s·ª± th√†nh c√¥ng.'
                }
            ]
        };

        const sampleMarkdownData = `ho_ten: Nguy·ªÖn VƒÉn A
gioi_tinh: Nam
duong_lich: 15/06/1990 T√Ω (23:00-01:00)
am_lich: 23/05/Canh Ng·ªç
noi_sinh: H√† N·ªôi
ban_menh: Th·ªï
cuc: Th·ªßy Nh·ªã C·ª•c
am_duong: D∆∞∆°ng
chu_menh: Canh
chu_than: Ng·ªç

## M·ªÜNH
dia_chi: T√Ω
chinh_tinh: T·ª≠ Vi (ƒê)
phu_tinh_tot: Thi√™n Ph√∫c, Thi√™n Quan
phu_tinh_xau: Thi√™n H√¨nh
phu_tinh_trung_binh: Thi√™n Kh√¥ng, ƒê·ªãa Ki·∫øp
vong_trang_sinh: Tr∆∞·ªùng Sinh
is_than: true

## CHU_GIAI
- title: T·ª≠ Vi
content: T·ª≠ Vi l√† ch·ªß tinh c·ªßa m·ªánh, ƒë·∫°i di·ªán cho quy·ªÅn l·ª±c, danh v·ªçng v√† s·ª± th√†nh c√¥ng.`;

        return {
            userData: sampleUserData,
            chartData: sampleChartData,
            markdownData: sampleMarkdownData
        };
    }

    // Validate d·ªØ li·ªáu ng∆∞·ªùi d√πng
    validateUserData(userData) {
        const errors = [];

        if (!userData.name || userData.name.trim().length < 2) {
            errors.push('T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        }

        if (!userData.gender || !['Nam', 'N·ªØ'].includes(userData.gender)) {
            errors.push('Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá');
        }

        if (!userData.birthdate || !this.validateDateFormat(userData.birthdate)) {
            errors.push('ƒê·ªãnh d·∫°ng ng√†y sinh kh√¥ng h·ª£p l·ªá (dd/mm/yy)');
        }

        if (!userData.birthtime) {
            errors.push('Vui l√≤ng ch·ªçn gi·ªù sinh');
        }

        if (!userData.birthplace || userData.birthplace.trim().length < 2) {
            errors.push('N∆°i sinh ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        }

        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }

    // Validate ƒë·ªãnh d·∫°ng ng√†y
    validateDateFormat(dateString) {
        const dateRegex = /^(\d{1,2})\/(\d{1,2})\/(\d{2})$/;
        const match = dateString.match(dateRegex);
        
        if (!match) return false;
        
        const day = parseInt(match[1]);
        const month = parseInt(match[2]);
        const year = parseInt(match[3]);
        
        if (day < 1 || day > 31) return false;
        if (month < 1 || month > 12) return false;
        if (year < 0 || year > 99) return false;
        
        return true;
    }

    // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y t·ª´ dd/mm/yy sang dd/mm/yy
    convertDateFormat(dateString) {
        if (!this.validateDateFormat(dateString)) {
            return null;
        }
        return dateString; // Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng dd/mm/yy
    }
}

// T·∫°o instance global
window.userDataService = new UserDataService();
