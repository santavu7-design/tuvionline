// LLMService - Service g·ªçi sang LLM
class LLMService {
    constructor() {
        this.apiKeys = [
            'AIzaSyAlst5yeNQebSyfxUMRY6yDK7lvwKMUzLM',
            'AIzaSyAxs5Y8I2wBENa3ZaE45iK5jxdvWpn-Pjs'
        ];

        this.models = [
            'gemini-1.5-flash',
            'gemini-1.5-pro',
            'gemini-pro'
        ];

        this.currentKeyIndex = 0;
        this.currentModelIndex = 0;
    }

    // T·∫°o n·ªôi dung v·ªõi LLM
    async generateContent(prompt, options = {}) {
        const defaultOptions = {
            temperature: 0.3,
            maxOutputTokens: 2000,
            retryCount: 3
        };

        const config = { ...defaultOptions, ...options };
        let lastError = null;

        // Th·ª≠ v·ªõi t·∫•t c·∫£ c√°c model v√† key
        for (let attempt = 0; attempt < config.retryCount; attempt++) {
            for (const model of this.models) {
                for (let keyIndex = 0; keyIndex < this.apiKeys.length; keyIndex++) {
                    try {
                        const result = await this.callGeminiAPI(model, this.apiKeys[keyIndex], prompt, config);
                        if (result) {
                            this.log(`‚úÖ Th√†nh c√¥ng v·ªõi model ${model} - key ${keyIndex + 1}`, 'success');
                            return result;
                        }
                    } catch (error) {
                        lastError = error;
                        this.log(`‚ùå L·ªói ${model} key ${keyIndex + 1}: ${error.message}`, 'error');
                        
                        // N·∫øu l√† l·ªói quota, th·ª≠ key kh√°c
                        if (error.message.includes('quota') || error.message.includes('429')) {
                            continue;
                        }
                    }
                }
            }
            
            // N·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i, ƒë·ª£i m·ªôt ch√∫t r·ªìi th·ª≠ l·∫°i
            if (attempt < config.retryCount - 1) {
                this.log(`üîÑ Th·ª≠ l·∫°i l·∫ßn ${attempt + 2}...`, 'warning');
                await this.delay(1000 * (attempt + 1)); // TƒÉng th·ªùi gian ch·ªù m·ªói l·∫ßn th·ª≠
            }
        }

        throw new Error(`Kh√¥ng th·ªÉ t·∫°o n·ªôi dung sau ${config.retryCount} l·∫ßn th·ª≠. L·ªói cu·ªëi: ${lastError?.message || 'Unknown error'}`);
    }

    // G·ªçi Gemini API
    async callGeminiAPI(model, apiKey, prompt, config) {
        const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;
        
        const requestBody = {
            contents: [{ 
                parts: [{ text: prompt }] 
            }],
            generationConfig: {
                temperature: config.temperature,
                maxOutputTokens: config.maxOutputTokens
            }
        };

        const response = await fetch(url, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json' 
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const errorText = await response.text();
            let errorMessage = `HTTP ${response.status}`;
            
            try {
                const errorData = JSON.parse(errorText);
                if (errorData.error && errorData.error.message) {
                    errorMessage = errorData.error.message;
                }
            } catch (e) {
                errorMessage = errorText || errorMessage;
            }

            throw new Error(errorMessage);
        }

        const data = await response.json();
        
        if (data.candidates && data.candidates[0] && data.candidates[0].content) {
            return data.candidates[0].content.parts[0].text;
        }
        
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ API');
    }

    // T·∫°o l√° s·ªë t·ª≠ vi
    async generateLaso(userData) {
        const dob = userData.dob;
        const day = String(dob.getDate()).padStart(2, '0');
        const month = String(dob.getMonth() + 1).padStart(2, '0');
        const year = dob.getFullYear();
        
        const prompt = `B·∫°n l√† m·ªôt chuy√™n gia t·ª≠ vi h·ªçc Vi·ªát Nam v·ªõi ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ thu·∫≠t t·ª≠ vi c·ªï truy·ªÅn. H√£y t·∫°o m·ªôt l√° s·ªë t·ª≠ vi chi ti·∫øt v√† huy·ªÅn b√≠ cho ng∆∞·ªùi d√πng d·ª±a tr√™n th√¥ng tin sau:

H·ªç v√† T√™n: ${userData.name}
Gi·ªõi T√≠nh: ${userData.gender}
Ng√†y Sinh D∆∞∆°ng L·ªãch: ${day}/${month}/${year} ${userData.time}
N∆°i Sinh: ${userData.birthPlace}

**Y√äU C·∫¶U ƒê·∫∂C BI·ªÜT QUAN TR·ªåNG:**
1. H√£y KI·ªÇM TRA TH·∫¨T K·ª∏ t·ª´ng th√¥ng tin tr∆∞·ªõc khi t·∫°o l√° s·ªë
2. Vi·∫øt v·ªõi gi·ªçng ƒëi·ªáu huy·ªÅn b√≠, khoa h·ªçc t·ª≠ vi, s·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng v√† chi ti·∫øt nh∆∞ m·ªôt th·∫ßy t·ª≠ vi chuy√™n nghi·ªáp
3. M·ªói ph·∫ßn t·ª≠ vi c·∫ßn ƒë∆∞·ª£c ph√¢n t√≠ch s√¢u s·∫Øc v·ªõi c√°c y·∫øu t·ªë phong th·ªßy, √¢m d∆∞∆°ng ng≈© h√†nh, v√† c√°c sao chi·∫øu m·ªánh
4. ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n gi·ªØa c√°c cung v√† th√¥ng tin c√° nh√¢n
5. Ki·ªÉm tra l·∫°i to√†n b·ªô l√° s·ªë tr∆∞·ªõc khi tr·∫£ v·ªÅ k·∫øt qu·∫£

**L∆ØU √ù:** H√£y d√†nh th·ªùi gian ƒë·ªÉ ki·ªÉm tra k·ªπ l∆∞·ª°ng t·ª´ng chi ti·∫øt, ƒë·∫£m b·∫£o t√≠nh ch√≠nh x√°c v√† logic c·ªßa l√° s·ªë t·ª≠ vi.

H√£y tr·∫£ v·ªÅ CH√çNH X√ÅC theo ƒë·ªãnh d·∫°ng sau, KH√îNG TH√äM TEXT GI·∫¢I TH√çCH KH√ÅC:

ho_ten: ${userData.name}
gioi_tinh: ${userData.gender}
duong_lich: ${day}/${month}/${year} ${userData.time}
am_lich: [T·∫°o ng√†y √¢m l·ªãch m√¥ ph·ªèng]
noi_sinh: ${userData.birthPlace}
ban_menh: [T·∫°o b·∫£n m·ªánh m√¥ ph·ªèng]
cuc: [T·∫°o c·ª•c m√¥ ph·ªèng]
am_duong: ${userData.gender === 'Nam' ? 'D∆∞∆°ng' : '√Çm'}
chu_menh: [T·∫°o ch·ªß m·ªánh m√¥ ph·ªèng]
chu_than: [T·∫°o ch·ªß th√¢n m√¥ ph·ªèng]

## M·ªÜNH
dia_chi: [T·∫°o ƒë·ªãa chi m√¥ ph·ªèng]
chinh_tinh: [T·∫°o ch√≠nh tinh m√¥ ph·ªèng]
phu_tinh_tot: [T·∫°o ph·ª• tinh t·ªët m√¥ ph·ªèng]
phu_tinh_xau: [T·∫°o ph·ª• tinh x·∫•u m√¥ ph·ªèng]
phu_tinh_trung_binh: [T·∫°o ph·ª• tinh trung b√¨nh m√¥ ph·ªèng]
vong_trang_sinh: [T·∫°o v√≤ng tr√†ng sinh m√¥ ph·ªèng]
is_than: false

## PH·ª§ M·∫™U
dia_chi: [T·∫°o ƒë·ªãa chi m√¥ ph·ªèng]
chinh_tinh: [T·∫°o ch√≠nh tinh m√¥ ph·ªèng]
phu_tinh_tot: [T·∫°o ph·ª• tinh t·ªët m√¥ ph·ªèng]
phu_tinh_xau: [T·∫°o ph·ª• tinh x·∫•u m√¥ ph·ªèng]
phu_tinh_trung_binh: [T·∫°o ph·ª• tinh trung b√¨nh m√¥ ph·ªèng]
vong_trang_sinh: [T·∫°o v√≤ng tr√†ng sinh m√¥ ph·ªèng]
is_than: false

## CH√ö GI·∫¢I
content: D·ª±a tr√™n l√° s·ªë t·ª≠ vi c·ªßa ${userData.name}, sinh ng√†y ${day}/${month}/${year} ${userData.time} t·∫°i ${userData.birthPlace}, ƒë√¢y l√† ph√¢n t√≠ch chi ti·∫øt v·ªÅ v·∫≠n m·ªánh...`;

        return await this.generateContent(prompt, {
            temperature: 0.2, // Th·∫•p h∆°n ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
            maxOutputTokens: 3000
        });
    }

    // Xem t·ª≠ vi ng√†y
    async generateDailyFortune(date, canChi, lunar) {
        const dateStr = this.formatDateToDDMMYYYY(date);
        
        const prompt = `B·∫°n l√† chuy√™n gia t·ª≠ vi h·ªçc Vi·ªát Nam. H√£y xem t·ª≠ vi cho ng√†y ${dateStr} (${lunar}, Can Chi: ${canChi}).

H√£y ph√¢n t√≠ch:
1. T·ªïng quan ng√†y n√†y t·ªët hay x·∫•u (ƒëi·ªÉm t·ª´ 1-10)
2. Vi·ªác n√™n l√†m trong ng√†y
3. Vi·ªác n√™n tr√°nh trong ng√†y
4. L·ªùi khuy√™n c·ª• th·ªÉ

Tr·∫£ v·ªÅ theo ƒë·ªãnh d·∫°ng JSON:
{
    "tongQuan": "M√¥ t·∫£ t·ªïng quan",
    "diem": 7,
    "nenLam": ["Vi·ªác 1", "Vi·ªác 2"],
    "nenTranh": ["Vi·ªác 1", "Vi·ªác 2"],
    "loiKhuyen": "L·ªùi khuy√™n c·ª• th·ªÉ"
}`;

        return await this.generateContent(prompt, {
            temperature: 0.3,
            maxOutputTokens: 1000
        });
    }

    // Helper methods
    formatDateToDDMMYYYY(date) {
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    log(message, type = 'info') {
        if (window.uiService && window.uiService.log) {
            window.uiService.log(message, type);
        } else {
            console.log(`[${type.toUpperCase()}] ${message}`);
        }
    }

    // Ki·ªÉm tra tr·∫°ng th√°i API
    async checkAPIStatus() {
        try {
            const result = await this.generateContent('Test', { maxOutputTokens: 10 });
            return result ? 'OK' : 'ERROR';
        } catch (error) {
            return `ERROR: ${error.message}`;
        }
    }
}

// T·∫°o instance global
const llmService = new LLMService();
window.llmService = llmService; // ƒê·ªÉ c√°c service kh√°c c√≥ th·ªÉ truy c·∫≠p
