// LasoService - Service qu·∫£n l√Ω l√° s·ªë t·ª≠ vi
class LasoService {
    constructor() {
        this.llmService = window.llmService;
    }

    // Hi·ªÉn th·ªã l√° s·ªë c·ªßa t√¥i
    showMyLaso() {
        const currentData = userDataService.getCurrentData();
        if (!currentData) {
            alert('Ch∆∞a c√≥ l√° s·ªë t·ª≠ vi. Vui l√≤ng t·∫°o l√° s·ªë tr∆∞·ªõc!');
            return;
        }
        
        uiService.showResult();
        this.displayLasoData(currentData.rawMarkdown);
    }

    // T·∫°o l√° s·ªë t·ª≠ vi m·ªõi
    async generateLaso(userData) {
        uiService.showLoading();
        uiService.log('üîÆ B·∫Øt ƒë·∫ßu t·∫°o l√° s·ªë t·ª≠ vi...', 'info');
        uiService.log('üîç Y√™u c·∫ßu LLM ki·ªÉm tra th·∫≠t k·ªπ t·ª´ng chi ti·∫øt...', 'info');

        try {
            const result = await this.generateLasoWithLLM(userData);
            
            const data = {
                rawMarkdown: result,
                userData: userData,
                createdAt: new Date().toISOString()
            };
            
            userDataService.saveCurrentData(data);
            userDataService.saveUserData(userData);
            
            uiService.hideLoading();
            uiService.showWelcomeScreen();
            uiService.log('‚úÖ ƒê√£ t·∫°o l√° s·ªë t·ª≠ vi th√†nh c√¥ng!', 'success');
            alert('‚úÖ ƒê√£ t·∫°o l√° s·ªë t·ª≠ vi th√†nh c√¥ng!');
            
            return result;
        } catch (error) {
            uiService.hideLoading();
            uiService.log(`‚ùå L·ªói: ${error.message}`, 'error');
            alert(`‚ùå L·ªói: ${error.message}`);
            throw error;
        }
    }

    // T·∫°o l√° s·ªë v·ªõi LLM
    async generateLasoWithLLM(userData) {
        if (!this.llmService) {
            throw new Error('LLM Service ch∆∞a s·∫µn s√†ng');
        }

        const dob = userData.dob;
        const day = String(dob.getDate()).padStart(2, '0');
        const month = String(dob.getMonth() + 1).padStart(2, '0');
        const year = dob.getFullYear();
        
        const prompt = `B·∫°n l√† m·ªôt chuy√™n gia t·ª≠ vi h·ªçc Vi·ªát Nam v·ªõi ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ thu·∫≠t t·ª≠ vi c·ªï truy·ªÅn. H√£y t·∫°o m·ªôt l√° s·ªë t·ª≠ vi chi ti·∫øt v√† huy·ªÅn b√≠ cho ng∆∞·ªùi d√πng d·ª±a tr√™n th√¥ng tin sau:

H·ªç v√† T√™n: ${userData.name}
Gi·ªõi T√≠nh: ${userData.gender}
Ng√†y Sinh D∆∞∆°ng L·ªãch: ${day}/${month}/${year} ${userData.time}
N∆°i Sinh: ${userData.birthPlace}

**Y√äU C·∫¶U ƒê·∫∂C BI·ªÜT QUAN TR·ªåNG:**
1. H√£y KI·ªÇM TRA TH·∫¨T K·ª∏ t·ª´ng th√¥ng tin tr∆∞·ªõc khi t·∫°o l√° s·ªë
2. Vi·∫øt v·ªõi gi·ªçng ƒëi·ªáu huy·ªÅn b√≠, khoa h·ªçc t·ª≠ vi, s·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng v√† chi ti·∫øt nh∆∞ m·ªôt th·∫ßy t·ª≠ vi chuy√™n nghi·ªáp
3. M·ªói ph·∫ßn t·ª≠ vi c·∫ßn ƒë∆∞·ª£c ph√¢n t√≠ch s√¢u s·∫Øc v·ªõi c√°c y·∫øu t·ªë phong th·ªßy, √¢m d∆∞∆°ng ng≈© h√†nh, v√† c√°c sao chi·∫øu m·ªánh
4. ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n gi·ªØa c√°c cung v√† th√¥ng tin c√° nh√¢n
5. Ki·ªÉm tra l·∫°i to√†n b·ªô l√° s·ªë tr∆∞·ªõc khi tr·∫£ v·ªÅ k·∫øt qu·∫£

**L∆ØU √ù:** H√£y d√†nh th·ªùi gian ƒë·ªÉ ki·ªÉm tra k·ªπ l∆∞·ª°ng t·ª´ng chi ti·∫øt, ƒë·∫£m b·∫£o t√≠nh ch√≠nh x√°c v√† logic c·ªßa l√° s·ªë t·ª≠ vi.

H√£y tr·∫£ v·ªÅ CH√çNH X√ÅC theo ƒë·ªãnh d·∫°ng sau, KH√îNG TH√äM TEXT GI·∫¢I TH√çCH KH√ÅC:

ho_ten: ${userData.name}
gioi_tinh: ${userData.gender}
duong_lich: ${day}/${month}/${year} ${userData.time}
am_lich: [T·∫°o ng√†y √¢m l·ªãch m√¥ ph·ªèng]
noi_sinh: ${userData.birthPlace}
ban_menh: [T·∫°o b·∫£n m·ªánh m√¥ ph·ªèng]
cuc: [T·∫°o c·ª•c m√¥ ph·ªèng]
am_duong: ${userData.gender === 'Nam' ? 'D∆∞∆°ng' : '√Çm'}
chu_menh: [T·∫°o ch·ªß m·ªánh m√¥ ph·ªèng]
chu_than: [T·∫°o ch·ªß th√¢n m√¥ ph·ªèng]

## M·ªÜNH
dia_chi: [T·∫°o ƒë·ªãa chi m√¥ ph·ªèng]
chinh_tinh: [T·∫°o ch√≠nh tinh m√¥ ph·ªèng]
phu_tinh_tot: [T·∫°o ph·ª• tinh t·ªët m√¥ ph·ªèng]
phu_tinh_xau: [T·∫°o ph·ª• tinh x·∫•u m√¥ ph·ªèng]
phu_tinh_trung_binh: [T·∫°o ph·ª• tinh trung b√¨nh m√¥ ph·ªèng]
vong_trang_sinh: [T·∫°o v√≤ng tr√†ng sinh m√¥ ph·ªèng]
is_than: false

## PH·ª§ M·∫™U
dia_chi: [T·∫°o ƒë·ªãa chi m√¥ ph·ªèng]
chinh_tinh: [T·∫°o ch√≠nh tinh m√¥ ph·ªèng]
phu_tinh_tot: [T·∫°o ph·ª• tinh t·ªët m√¥ ph·ªèng]
phu_tinh_xau: [T·∫°o ph·ª• tinh x·∫•u m√¥ ph·ªèng]
phu_tinh_trung_binh: [T·∫°o ph·ª• tinh trung b√¨nh m√¥ ph·ªèng]
vong_trang_sinh: [T·∫°o v√≤ng tr√†ng sinh m√¥ ph·ªèng]
is_than: false

## CH√ö GI·∫¢I
content: D·ª±a tr√™n l√° s·ªë t·ª≠ vi c·ªßa ${userData.name}, sinh ng√†y ${day}/${month}/${year} ${userData.time} t·∫°i ${userData.birthPlace}, ƒë√¢y l√† ph√¢n t√≠ch chi ti·∫øt v·ªÅ v·∫≠n m·ªánh...`;

        try {
            const result = await this.llmService.generateContent(prompt);
            return result;
        } catch (error) {
            console.error('L·ªói LLM:', error);
            throw error;
        }
    }

    // T·∫°o d·ªØ li·ªáu gi·∫£ (mock data)
    generateMockData() {
        try {
            const userData = {
                name: document.getElementById('name').value,
                gender: document.getElementById('gender').value,
                dob: userDataService.parseDateFromDDMMYYYY(document.getElementById('dob_display').value),
                time: document.getElementById('time').value,
                birthPlace: document.getElementById('birthPlace').value
            };

            const mockData = userDataService.generateSampleLasoData(userData);

            const data = {
                rawMarkdown: mockData,
                userData: userData,
                createdAt: new Date().toISOString()
            };

            userDataService.saveCurrentData(data);
            userDataService.saveUserData(userData);

            uiService.showWelcomeScreen();
            uiService.log('‚úÖ ƒê√£ t·∫°o d·ªØ li·ªáu gi·∫£ th√†nh c√¥ng!', 'success');
            alert('‚úÖ ƒê√£ t·∫°o d·ªØ li·ªáu gi·∫£ th√†nh c√¥ng!');
        } catch (error) {
            uiService.log(`‚ùå L·ªói: ${error.message}`, 'error');
            alert(`‚ùå L·ªói: ${error.message}`);
        }
    }

    // Hi·ªÉn th·ªã d·ªØ li·ªáu l√° s·ªë
    displayLasoData(markdownData) {
        const lines = markdownData.split('\n');
        let html = '<h2>üìä L√° S·ªë T·ª≠ Vi</h2>';
        
        for (let line of lines) {
            line = line.trim();
            if (line.startsWith('##')) {
                html += `<h3>${line.substring(2).trim()}</h3>`;
            } else if (line.includes(':')) {
                const [key, value] = line.split(':', 2);
                if (key && value) {
                    html += `<p><strong>${key.trim()}:</strong> ${value.trim()}</p>`;
                }
            }
        }
        
        document.getElementById('content').innerHTML = html;
    }

    // X·ª≠ l√Ω form submit
    async handleFormSubmit(formData) {
        const userData = {
            name: formData.name.trim(),
            dob: userDataService.parseDateFromDDMMYYYY(formData.dobDisplay),
            time: formData.time.trim(),
            gender: formData.gender,
            birthPlace: formData.birthPlace.trim()
        };

        if (!userData.name || !userData.dob || !userData.time || !userData.gender || !userData.birthPlace) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.');
            return;
        }

        try {
            await this.generateLaso(userData);
        } catch (error) {
            console.error('L·ªói khi t·∫°o l√° s·ªë:', error);
        }
    }
}

// T·∫°o instance global
const lasoService = new LasoService();
